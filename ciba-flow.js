#!/usr/bin/env node

/**
 * Script Node.js para el flujo completo CIBA de verificaci√≥n de edad
 * Telef√≥nica Open Gateway - Age Verification API
 * 
 * Flujo: bc-authorize ‚Üí token ‚Üí kyc-age-verification
 */

import 'dotenv/config';
import readline from 'readline';

// Configuraci√≥n de la API
const BASE_URL = 'https://sandbox.opengateway.telefonica.com/apigateway';
// Probar primero con scope m√°s simple
const SCOPE = 'kyc-age-verification:verify';
// Scope original que estaba causando problemas:
// const SCOPE = 'dpv:FraudPreventionAndDetection kyc-age-verification:verify';

// Validar variables de entorno
if (!process.env.CLIENT_ID || !process.env.CLIENT_SECRET) {
    console.error('‚ùå Error: CLIENT_ID y CLIENT_SECRET son requeridos en el archivo .env');
    process.exit(1);
}

// Verificar formato de credenciales
if (!/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(process.env.CLIENT_ID)) {
    console.error('‚ö†Ô∏è Advertencia: CLIENT_ID no parece tener formato UUID v√°lido');
}

if (!/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(process.env.CLIENT_SECRET)) {
    console.error('‚ö†Ô∏è Advertencia: CLIENT_SECRET no parece tener formato UUID v√°lido');
}

// Generar Authorization Basic
const basicAuth = Buffer.from(`${process.env.CLIENT_ID}:${process.env.CLIENT_SECRET}`).toString('base64');

console.log(`üîß CLIENT_ID configurado: ${process.env.CLIENT_ID.substring(0, 8)}...`);
console.log(`üîß CLIENT_SECRET configurado: ${process.env.CLIENT_SECRET.substring(0, 8)}...`);

// Configurar readline para input del usuario
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

/**
 * Funci√≥n para hacer peticiones HTTP con manejo de errores y reintentos
 */
async function makeRequest(url, options, step, maxRetries = 2) {
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries + 1; attempt++) {
        if (attempt > 1) {
            const delay = Math.min(1000 * Math.pow(2, attempt - 2), 5000); // Backoff exponencial
            console.log(`‚è≥ Reintentando en ${delay}ms... (intento ${attempt}/${maxRetries + 1})`);
            await new Promise(resolve => setTimeout(resolve, delay));
        }
        
        try {
            if (attempt === 1) {
                console.log(`\nüîÑ ${step}...`);
                console.log(`üìç URL: ${url}`);
                console.log(`üîß Headers:`, JSON.stringify(options.headers, null, 2));
                console.log(`üìù Body:`, options.body);
            }
            
            const response = await fetch(url, options);
            
            console.log(`üìä Status: ${response.status} ${response.statusText}`);
            
            if (attempt === 1) {
                console.log(`üìã Response headers:`, Object.fromEntries(response.headers.entries()));
            }
            
            // Intentar obtener el texto de la respuesta primero
            const responseText = await response.text();
            console.log(`üìÑ Response text:`, responseText || '(empty response)');
            
            // Si es error 500 y tenemos reintentos disponibles, reintentar
            if (response.status === 500 && attempt <= maxRetries) {
                lastError = new Error(`Servidor interno error (HTTP 500) - intento ${attempt}`);
                console.log(`‚ö†Ô∏è Error 500 del servidor, reintentando...`);
                continue;
            }
            
            // Intentar parsear como JSON solo si hay contenido
            let data;
            if (responseText.trim()) {
                try {
                    data = JSON.parse(responseText);
                } catch (jsonError) {
                    console.error(`‚ùå Error parsing JSON:`, jsonError.message);
                    console.error(`üìÑ Raw response:`, responseText);
                    throw new Error(`${step} fall√≥: Respuesta no es JSON v√°lido - ${responseText}`);
                }
            } else {
                console.error(`‚ùå Respuesta vac√≠a del servidor`);
                throw new Error(`${step} fall√≥: Respuesta vac√≠a del servidor`);
            }
            
            if (!response.ok) {
                console.error(`‚ùå Error HTTP ${response.status}:`, data);
                throw new Error(`${step} fall√≥: HTTP ${response.status} - ${JSON.stringify(data)}`);
            }
            
            console.log(`‚úÖ ${step} exitoso`);
            console.log(`üìä Response data:`, JSON.stringify(data, null, 2));
            return data;
            
        } catch (error) {
            lastError = error;
            
            if (attempt <= maxRetries && (error.message.includes('500') || error.message.includes('fetch'))) {
                console.log(`‚ö†Ô∏è Error temporal, reintentando... (${error.message})`);
                continue;
            }
            
            // Si no hay m√°s intentos o es un error no recuperable, lanzar el error
            console.error(`‚ùå ${step} fall√≥ definitivamente:`, error.message);
            throw error;
        }
    }
    
    // Si llegamos aqu√≠, todos los reintentos fallaron
    throw lastError;
}

/**
 * Funci√≥n para probar conectividad b√°sica
 */
async function testConnectivity() {
    console.log('\nüîç Probando conectividad con Open Gateway...');
    
    try {
        const response = await fetch(`${BASE_URL}/.well-known/openid_configuration`, {
            method: 'GET',
            headers: {
                'accept': 'application/json'
            }
        });
        
        if (response.ok) {
            console.log('‚úÖ Conectividad con Open Gateway: OK');
            return true;
        } else {
            console.log(`‚ö†Ô∏è Open Gateway responde con status: ${response.status}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå Error de conectividad: ${error.message}`);
        return false;
    }
}

/**
 * Paso 1: Iniciar autorizaci√≥n CIBA
 */
async function bcAuthorize(phoneNumber) {
    const url = `${BASE_URL}/bc-authorize`;
    
    // Formatear el login_hint correctamente (algunos APIs requieren tel: prefix)
    const loginHint = phoneNumber.startsWith('tel:') ? phoneNumber : `tel:${phoneNumber}`;
    
    const options = {
        method: 'POST',
        headers: {
            'accept': 'application/json',
            'content-type': 'application/x-www-form-urlencoded',
            'authorization': `Basic ${basicAuth}`
        },
        body: new URLSearchParams({
            login_hint: loginHint,
            scope: SCOPE
        })
    };
    
    console.log(`üì± N√∫mero de tel√©fono: ${phoneNumber}`);
    console.log(`üìû Login hint: ${loginHint}`);
    console.log(`üîê Scope: ${SCOPE}`);
    
    const data = await makeRequest(url, options, 'Paso 1: bc-authorize');
    
    if (!data.auth_req_id) {
        throw new Error('No se recibi√≥ auth_req_id en la respuesta');
    }
    
    console.log(`üé´ auth_req_id recibido: ${data.auth_req_id.substring(0, 50)}...`);
    return data.auth_req_id;
}

/**
 * Paso 2: Obtener token de acceso
 */
async function getToken(authReqId) {
    const url = `${BASE_URL}/token`;
    
    const options = {
        method: 'POST',
        headers: {
            'accept': 'application/json',
            'content-type': 'application/x-www-form-urlencoded',
            'authorization': `Basic ${basicAuth}`
        },
        body: new URLSearchParams({
            grant_type: 'urn:openid:params:grant-type:ciba',
            auth_req_id: authReqId
        })
    };
    
    console.log(`üé´ Usando auth_req_id: ${authReqId.substring(0, 50)}...`);
    
    const data = await makeRequest(url, options, 'Paso 2: token');
    
    if (!data.access_token) {
        throw new Error('No se recibi√≥ access_token en la respuesta');
    }
    
    console.log(`üîë access_token recibido: ${data.access_token.substring(0, 50)}...`);
    console.log(`‚è∞ Expira en: ${data.expires_in} segundos`);
    
    return data.access_token;
}

/**
 * Paso 3: Verificar edad
 */
async function verifyAge(accessToken, ageThreshold = 21) {
    const url = `${BASE_URL}/kyc-age-verification/v0.1/verify`;
    
    const requestBody = {
        ageThreshold: ageThreshold,
        includeContentLock: false,
        includeParentalControl: false
    };
    
    const options = {
        method: 'POST',
        headers: {
            'accept': 'application/json',
            'content-type': 'application/json',
            'authorization': `Bearer ${accessToken}`
        },
        body: JSON.stringify(requestBody)
    };
    
    console.log(`üéØ Umbral de edad: ${ageThreshold} a√±os`);
    console.log(`üìä Body de la petici√≥n:`, requestBody);
    
    const data = await makeRequest(url, options, 'Paso 3: kyc-age-verification');
    
    return data;
}

/**
 * Funci√≥n para obtener input del usuario
 */
function getUserInput(question) {
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            resolve(answer.trim());
        });
    });
}

/**
 * Funci√≥n para validar formato de n√∫mero de tel√©fono
 */
function isValidPhoneNumber(phone) {
    // Debe empezar con + y tener al menos 10 d√≠gitos
    return /^\+\d{10,15}$/.test(phone);
}

/**
 * Funci√≥n para mostrar el resultado final
 */
function displayResult(result) {
    console.log('\n' + '='.repeat(60));
    console.log('üéâ RESULTADO FINAL DE VERIFICACI√ìN DE EDAD');
    console.log('='.repeat(60));
    
    if (result.ageCheck !== undefined) {
        const ageCheckIcon = result.ageCheck === 'true' ? '‚úÖ' : 
                            result.ageCheck === 'false' ? '‚ùå' : '‚ùì';
        console.log(`${ageCheckIcon} Verificaci√≥n de edad: ${result.ageCheck}`);
    }
    
    if (result.verifiedStatus !== undefined) {
        const verifiedIcon = result.verifiedStatus ? 'üÜî' : '‚ö†Ô∏è';
        console.log(`${verifiedIcon} Estado verificado: ${result.verifiedStatus}`);
    }
    
    if (result.identityMatchScore !== undefined) {
        const scoreIcon = result.identityMatchScore >= 80 ? 'üéØ' : 
                         result.identityMatchScore >= 60 ? 'üìä' : 'üìâ';
        console.log(`${scoreIcon} Puntuaci√≥n de identidad: ${result.identityMatchScore}/100`);
    }
    
    if (result.contentLock !== undefined) {
        console.log(`üîí Bloqueo de contenido: ${result.contentLock}`);
    }
    
    if (result.parentalControl !== undefined) {
        console.log(`üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Control parental: ${result.parentalControl}`);
    }
    
    console.log('\nüìã Respuesta completa:');
    console.log(JSON.stringify(result, null, 2));
    console.log('='.repeat(60));
}

/**
 * Funci√≥n principal
 */
async function main() {
    try {
        console.log('üöÄ Telef√≥nica Open Gateway - Age Verification CIBA Flow');
        console.log('=' .repeat(60));
        console.log('Este script realizar√° el flujo completo de verificaci√≥n de edad:');
        console.log('1Ô∏è‚É£  bc-authorize (iniciar autenticaci√≥n)');
        console.log('2Ô∏è‚É£  token (obtener access token)');
        console.log('3Ô∏è‚É£  kyc-age-verification (verificar edad)');
        console.log('');
        
        // Solicitar n√∫mero de tel√©fono
        console.log('üí° N√∫meros recomendados para el sandbox:');
        console.log('   üìû +34123456789 (n√∫mero de ejemplo oficial)');
        console.log('   üìû +34696567077 (tu n√∫mero anterior)');
        console.log('   üìû +34600000001 a +34600000010 (n√∫meros de prueba)');
        console.log('');
        
        let phoneNumber;
        while (true) {
            phoneNumber = await getUserInput('üì± Introduce el n√∫mero de tel√©fono (formato: +34123456789): ');
            
            if (!phoneNumber) {
                console.log('‚ùå El n√∫mero de tel√©fono es obligatorio.');
                continue;
            }
            
            if (!isValidPhoneNumber(phoneNumber)) {
                console.log('‚ùå Formato inv√°lido. Usa formato internacional con + (ej: +34123456789)');
                continue;
            }
            
            break;
        }
        
        // Solicitar umbral de edad (opcional)
        let ageThreshold = await getUserInput('üéØ Introduce el umbral de edad (por defecto 21): ');
        ageThreshold = ageThreshold ? parseInt(ageThreshold) : 21;
        
        if (isNaN(ageThreshold) || ageThreshold < 0 || ageThreshold > 120) {
            console.log('‚ö†Ô∏è  Umbral inv√°lido, usando 21 por defecto');
            ageThreshold = 21;
        }
        
        console.log('\nüîÑ Iniciando flujo CIBA...');
        
        // Probar conectividad primero
        await testConnectivity();
        
        // Ejecutar flujo completo
        const authReqId = await bcAuthorize(phoneNumber);
        const accessToken = await getToken(authReqId);
        const result = await verifyAge(accessToken, ageThreshold);
        
        // Mostrar resultado
        displayResult(result);
        
    } catch (error) {
        console.error('\nüí• Error en el flujo CIBA:', error.message);
        
        if (error.message.includes('401')) {
            console.log('\nüí° Posibles causas:');
            console.log('- Credenciales CLIENT_ID/CLIENT_SECRET incorrectas');
            console.log('- Token expirado');
        } else if (error.message.includes('403')) {
            console.log('\nüí° Posibles causas:');
            console.log('- Sin permisos para el scope solicitado');
            console.log('- N√∫mero de tel√©fono no autorizado en sandbox');
        } else if (error.message.includes('404')) {
            console.log('\nüí° Posibles causas:');
            console.log('- URL del endpoint incorrecta');
            console.log('- Servicio no disponible');
        }
        
        process.exit(1);
    } finally {
        rl.close();
    }
}

// Ejecutar script
main();